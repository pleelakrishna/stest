private Set<StorageReg> getStoragedataByDistence(List<FarRegs> farregbean, Set<StorageReg> storagedata, double dist) throws IOException {

	Set<StorageReg> distencestorageSet  =new LinkedHashSet<StorageReg>();
	
	
	
	for(StorageReg entry :storagedata)
	{
	String requestUrl  = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins="+farregbean.get(0).getPincode()+"&destinations="+entry.getPincode()+"&key=AIzaSyCnMiHsbLVPD4LOhfTWCnEPasW0BR_pOY0";
    
    
    URL obj = new URL(requestUrl);
    HttpURLConnection con = (HttpURLConnection) obj.openConnection();
    // optional default is GET
    con.setRequestMethod("GET");
    //add request header
    con.setRequestProperty("User-Agent", "Mozilla/5.0");
    int responseCode = con.getResponseCode();
    
    String distence[] =null;
    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
    String inputLine;
    StringBuffer responses = new StringBuffer();
    while ((inputLine = in.readLine()) != null) {
    	//System.out.println(inputLine);
    	
    	if(inputLine.contains("text") && !inputLine.contains("mins"))
    			{
    		distence =inputLine.split(":");
    		
    			}
    	
    	responses.append(inputLine);
    }
    
  
   // System.out.println(distence[1].length());
    
    
    String  finaldistence=distence[1].substring(2, distence[1].indexOf(" mi"));
    
   // System.out.println(finaldistence);
    
    double d=Double.parseDouble(finaldistence);
    
    
    double distanceInKM =d*1.60934;        //converting distance miles to km .
    
    String result = String.format("%.2f", distanceInKM);
    
  
    entry.setDistance(result);   
    
    distencestorageSet.add(entry);
    
    
    
	}
	return distencestorageSet; 
}
